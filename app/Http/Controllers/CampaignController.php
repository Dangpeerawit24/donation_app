<?php

namespace App\Http\Controllers;

use App\Models\Campaign;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Auth;

class CampaignController extends Controller
{
    public function index()
    {
        $categories = DB::table('categories')->get();
        $Results = DB::table('campaigns')
            ->leftJoin(
                DB::raw('(SELECT campaignsid, SUM(value) as total_value 
                  FROM campaign_transactions 
                  GROUP BY campaignsid) as ct'),
                'campaigns.id',
                '=',
                'ct.campaignsid'
            )
            ->select('campaigns.*', DB::raw('IFNULL(ct.total_value, 0) as total_value'))
            ->orderByDesc('campaigns.created_at')
            ->get();

        if (Auth::user()->type === 'admin') {
            return view('admin.campaigns', compact('categories', 'Results'));
        } elseif (Auth::user()->type === 'manager') {
            return view('manager.campaigns', compact('categories', 'Results'));
        }
    }

    public function store(Request $request)
    {
        $request->validate([
            'categoriesID' => 'required|integer',
            'name' => 'required',
            'description' => 'required',
            'price' => 'required|numeric',
            'stock' => 'required|integer',
            'details' => 'required',
            'status' => 'required',
            'respond' => 'required',
            'broadcastOption' => 'required',
            'campaign_img' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:7048',
        ]);

        $data = $request->all();

        // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        if ($request->hasFile('campaign_img')) {
            $fileName = time() . '.' . $request->campaign_img->extension();
            $request->campaign_img->move(public_path('img/campaign/'), $fileName);
            $data['campaign_img'] = $fileName;
        }

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        $campaign = Campaign::create($data);

        if ($campaign->status == "‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç") {
            $lineToken = env('LINE_CHANNEL_ACCESS_TOKEN');
            $linkapp = env('Liff_App');
            $priceMessage = ($campaign->price == 1) ? "‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏®‡∏£‡∏±‡∏ó‡∏ò‡∏≤" : "{$campaign->price} ‡∏ö‡∏≤‡∏ó";

            $message = "üéâ ‡∏Ç‡∏≠‡πÄ‡∏ä‡∏¥‡∏ç‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç üéâ\n" .
                "‚ú® {$campaign->name}\n" .
                "üí∞ ‡∏£‡πà‡∏ß‡∏°‡∏ö‡∏∏‡∏ç: {$priceMessage}\n" .
                "üìã " . $campaign->description;

            $message2 = "‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡πà‡∏ß‡∏°‡∏ö‡∏∏‡∏ç\n" .
                "üí∞ ‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏ò‡∏¥‡πÄ‡∏°‡∏ï‡∏ï‡∏≤‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏±‡∏®‡∏°‡∏µ\n" .
                "‡∏ò.‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ 171-1-75423-3\n" .
                "‡∏ò.‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ 649-242269-4\n\n" .
                "üìå ‡∏£‡πà‡∏ß‡∏°‡∏ö‡∏∏‡∏ç‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà : $linkapp";

            $imageUrl = asset('img/campaign/' . $campaign->campaign_img);

            $userIds = [];

            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ï‡∏≤‡∏° broadcastOption
            if ($request->broadcastOption === 'Broadcast') {
                // ‡∏™‡πà‡∏á Broadcast API
                Http::withHeaders([
                    'Content-Type' => 'application/json',
                    'Authorization' => "Bearer $lineToken",
                ])->post('https://api.line.me/v2/bot/message/broadcast', [
                    'messages' => [
                        ['type' => 'image', 'originalContentUrl' => $imageUrl, 'previewImageUrl' => $imageUrl],
                        ['type' => 'text', 'text' => $message],
                        ['type' => 'text', 'text' => $message2],
                    ],
                ]);
            } elseif ($request->broadcastOption === '3months') {
                $userIds = DB::table('line_users')
                    ->where('created_at', '>=', now()->subMonths(3))
                    ->groupBy('user_id')
                    ->orderByRaw('MAX(created_at) DESC')
                    ->pluck('user_id');
            } elseif ($request->broadcastOption === 'year') {
                $userIds = DB::table('line_users')
                    ->select('user_id', DB::raw('MAX(created_at) as latest_created_at'))
                    ->where('created_at', '>=', now()->subYear()) // ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 1 ‡∏õ‡∏µ‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
                    ->groupBy('user_id')
                    ->orderBy('latest_created_at', 'desc')
                    ->pluck('user_id');
            }

            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö Multicast
            if (!empty($userIds)) {
                $userIdsChunk = array_chunk($userIds->toArray(), 500); // ‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î‡∏•‡∏∞ 500
                foreach ($userIdsChunk as $chunk) {
                    Http::withHeaders([
                        'Content-Type' => 'application/json',
                        'Authorization' => "Bearer $lineToken",
                    ])->post('https://api.line.me/v2/bot/message/multicast', [
                        'to' => $chunk,
                        'messages' => [
                            ['type' => 'image', 'originalContentUrl' => $imageUrl, 'previewImageUrl' => $imageUrl],
                            ['type' => 'text', 'text' => $message],
                            ['type' => 'text', 'text' => $message2],
                        ],
                    ]);
                }
            }

            return redirect()->back()->with('success', '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß.');
        }

        return redirect()->back()->with('success', '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }

    public function update(Request $request, $id)
    {
        $validated = $request->validate([
            'categoriesID' => 'required|integer',
            'name' => 'required',
            'description' => 'required',
            'price' => 'required|numeric',
            'stock' => 'required|integer',
            'details' => 'required',
            'status' => 'required',
            'campaign_img' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:7048',
        ]);

        $Campaign = Campaign::findOrFail($id);

        $Campaign->update([
            'name' => $validated['name'],
            'price' => $validated['price'],
            'description' => $validated['description'],
            'stock' => $validated['stock'],
            'details' => $validated['details'],
            'status' => $validated['status'] ?? null,
        ]);

        // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if ($request->hasFile('campaign_img')) {
            // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if ($Campaign->campaign_img && file_exists(public_path('img/campaign/' . $Campaign->campaign_img))) {
                unlink(public_path('img/campaign/' . $Campaign->campaign_img));
            }

            // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà
            $fileName = time() . '.' . $request->campaign_img->extension();
            $request->campaign_img->move(public_path('img/campaign/'), $fileName);

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            $Campaign->update(['campaign_img' => $fileName]);
        }

        return redirect()->back()->with('success', '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß.');
    }

    public function Closed($id)
    {
        $campaign = Campaign::findOrFail($id);

        $campaign->update([
            'status' => "‡∏õ‡∏¥‡∏î‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç‡πÅ‡∏•‡πâ‡∏ß"
        ]);

        // Push ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE OA ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö
        $lineToken = env('LINE_CHANNEL_ACCESS_TOKEN'); // LINE Access Token
        $message = "üôè ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏õ‡∏¥‡∏î‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç‡∏Ñ‡∏£‡∏±‡∏ö üôè\n" .
            "üôè ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏õ‡∏¥‡∏î‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç‡∏Ñ‡∏£‡∏±‡∏ö üôè\n\n" .
            "‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç : {$campaign->name}\n\n" .
            "‡∏Ç‡∏≠‡∏≠‡∏≤‡∏ô‡∏¥‡∏™‡∏á‡∏™‡πå‡πÅ‡∏´‡πà‡∏á‡∏ö‡∏∏‡∏ç‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏™‡∏ß ‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏£‡∏∏‡πà‡∏á‡πÄ‡∏£‡∏∑‡∏≠‡∏á ‡∏™‡∏°‡∏õ‡∏£‡∏≤‡∏£‡∏ñ‡∏ô‡∏≤‡πÉ‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£";

        // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE API
        $response = Http::withHeaders([
            'Content-Type' => 'application/json',
            'Authorization' => "Bearer $lineToken",
        ])->post('https://api.line.me/v2/bot/message/broadcast', [
            'messages' => [
                [
                    'type' => 'text',
                    'text' => $message, // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
                ],
            ],
        ]);

        if (!$response->successful()) {
            return redirect()->back()->with('error', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ.');
        }

        return response()->json(['success' => true, 'message' => '‡∏õ‡∏¥‡∏î‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß.']);
    }

    public function pushmessage(Request $request)
    {
        $campaign_id = $request->query('campaign_id');
        if (!$campaign_id) {
            return redirect()->back()->with('error', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ campaign ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        $campaign = DB::table('campaigns')->where('id', $campaign_id)->first();
        if (!$campaign) {
            return redirect()->back()->with('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
        $validated = $request->validate([
            'textareaInput' => 'required',
            'broadcastOption' => 'required',
            'campaign_imgpush' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:7048',
        ]);

        // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        $fileName = null;
        if ($request->hasFile('campaign_imgpush')) {
            $fileName = time() . '.' . $request->campaign_imgpush->extension();
            $request->campaign_imgpush->move(public_path('img/campaignpush/'), $fileName);

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á campaigns
            DB::table('campaigns')->where('id', $campaign_id)->update([
                'campaign_imgpush' => $fileName,
            ]);
        }

        // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Broadcast
        $priceMessage = $campaign->price == 1 ? '‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏®‡∏£‡∏±‡∏ó‡∏ò‡∏≤' : number_format($campaign->price, 2) . ' ‡∏ö‡∏≤‡∏ó';
        $description = $validated['textareaInput'] ?? '';
        $linkapp = env('Liff_App');

        $message = "{$description}\n" .
            "‚ú® ‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç{$campaign->name}\n" .
            "üí∞ ‡∏£‡πà‡∏ß‡∏°‡∏ö‡∏∏‡∏ç: {$priceMessage}\n\n" .
            "‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡πà‡∏ß‡∏°‡∏ö‡∏∏‡∏ç\n" .
            "üí∞ ‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏ò‡∏¥‡πÄ‡∏°‡∏ï‡∏ï‡∏≤‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏±‡∏®‡∏°‡∏µ\n" .
            "‡∏ò.‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ 171-1-75423-3\n" .
            "‡∏ò.‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ 649-242269-4\n\n" .
            "üìå ‡∏£‡πà‡∏ß‡∏°‡∏ö‡∏∏‡∏ç‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà : $linkapp";

        $imageUrl = $fileName
            ? asset('img/campaignpush/' . $fileName)
            : asset('img/campaign/' . $campaign->campaign_img);

        // $imageUrl = "https://images.unsplash.com/photo-1720048169707-a32d6dfca0b3?w=700&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDF8MHxmZWF0dXJlZC1waG90b3MtZmVlZHwxfHx8ZW58MHx8fHx8"; 

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Broadcast ‡∏ú‡πà‡∏≤‡∏ô LINE API
        $lineToken = env('LINE_CHANNEL_ACCESS_TOKEN');

        $userIds = [];

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ï‡∏≤‡∏° broadcastOption
        if ($request->broadcastOption === 'Broadcast') {
            // ‡∏™‡πà‡∏á Broadcast API
            Http::withHeaders([
                'Content-Type' => 'application/json',
                'Authorization' => "Bearer $lineToken",
            ])->post('https://api.line.me/v2/bot/message/broadcast', [
                'messages' => [
                    ['type' => 'image', 'originalContentUrl' => $imageUrl, 'previewImageUrl' => $imageUrl],
                    ['type' => 'text', 'text' => $message],
                ],
            ]);
        } elseif ($request->broadcastOption === '3months') {
            $userIds = DB::table('line_users')
                ->where('created_at', '>=', now()->subMonths(3))
                ->groupBy('user_id')
                ->orderByRaw('MAX(created_at) DESC')
                ->pluck('user_id');
        } elseif ($request->broadcastOption === 'year') {
            $userIds = DB::table('line_users')
                ->select('user_id', DB::raw('MAX(created_at) as latest_created_at'))
                ->where('created_at', '>=', now()->subYear()) // ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 1 ‡∏õ‡∏µ‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
                ->groupBy('user_id')
                ->orderBy('latest_created_at', 'desc')
                ->pluck('user_id');
        }

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö Multicast
        if (!empty($userIds)) {
            $userIdsChunk = array_chunk($userIds->toArray(), 500); // ‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î‡∏•‡∏∞ 500
            foreach ($userIdsChunk as $chunk) {
                Http::withHeaders([
                    'Content-Type' => 'application/json',
                    'Authorization' => "Bearer $lineToken",
                ])->post('https://api.line.me/v2/bot/message/multicast', [
                    'to' => $chunk,
                    'messages' => [
                        ['type' => 'image', 'originalContentUrl' => $imageUrl, 'previewImageUrl' => $imageUrl],
                        ['type' => 'text', 'text' => $message],
                    ],
                ]);
            }
        }

        return redirect()->back()->with('success', 'pushmessage ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß.');
    }

    public function sendFlexMessageWithText(Request $request)
    {
        $broadcastOption = $request->input('broadcastOption', 'Broadcast'); // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô Broadcast
        
        $campaigns = Campaign::where('status', '‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç')->get();
        if ($campaigns->isEmpty()) {
            return redirect()->back()->with('error', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç');
        }
        
        $lineToken = env('LINE_CHANNEL_ACCESS_TOKEN');
        $linkapp = env('Liff_App');

        $bubbles = [];
        $bubbles[] = [
            "type" => "bubble",
            "hero" => [
                "type" => "image",
                "url" => "https://donation.kuanimtungpichai.com/img/campaignall.png",
                "size" => "full",
                "aspectMode" => "fit",
                "aspectRatio" => "1:1"
            ],
        ];

        foreach ($campaigns as $campaign) {

            $bubbles[] = [
                'type' => 'bubble',
                'hero' => [
                    'type' => 'image',
                    'url' => asset('img/campaign/' . $campaign->campaign_img),
                    'size' => 'full',
                    'aspectMode' => 'fit',
                    'aspectRatio' => '1:1',
                ],
            ];
        }

        $bubbleChunks = array_chunk($bubbles, 10);

        $message2 = "‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡πà‡∏ß‡∏°‡∏ö‡∏∏‡∏ç\n" .
            "üí∞ ‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏ò‡∏¥‡πÄ‡∏°‡∏ï‡∏ï‡∏≤‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏±‡∏®‡∏°‡∏µ\n" .
            "‡∏ò.‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ 171-1-75423-3\n" .
            "‡∏ò.‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ 649-242269-4\n\n" .
            "üìå ‡∏£‡πà‡∏ß‡∏°‡∏ö‡∏∏‡∏ç‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà : $linkapp";

        $userIds = [];

        if ($broadcastOption === 'Broadcast') {
            foreach ($bubbleChunks as $chunk) {
                Http::withHeaders([
                    'Content-Type' => 'application/json',
                    'Authorization' => "Bearer $lineToken",
                ])->post('https://api.line.me/v2/bot/message/broadcast', [
                    'messages' => [
                        [
                            'type' => 'flex',
                            'altText' => '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç',
                            'contents' => [
                                'type' => 'carousel',
                                'contents' => $chunk,
                            ],
                        ],
                    ],
                ]);
            }

            Http::withHeaders([
                'Content-Type' => 'application/json',
                'Authorization' => "Bearer $lineToken",
            ])->post('https://api.line.me/v2/bot/message/broadcast', [
                'messages' => [
                    [
                        'type' => 'text',
                        'text' => $message2,
                    ],
                ],
            ]);
        } elseif ($broadcastOption === '3months') {
            $userIds = DB::table('line_users')
                ->where('created_at', '>=', now()->subMonths(3))
                ->groupBy('user_id')
                ->orderByRaw('MAX(created_at) DESC')
                ->pluck('user_id');
        } elseif ($broadcastOption === 'year') {
            $userIds = DB::table('line_users')
                ->select('user_id', DB::raw('MAX(created_at) as latest_created_at'))
                ->where('created_at', '>=', now()->subYear())
                ->groupBy('user_id')
                ->orderBy('latest_created_at', 'desc')
                ->pluck('user_id');
        }

        if (!empty($userIds)) {
            $userIdsChunk = array_chunk($userIds->toArray(), 500);
            foreach ($userIdsChunk as $chunk) {
                foreach ($bubbleChunks as $bubbles) {
                    Http::withHeaders([
                        'Content-Type' => 'application/json',
                        'Authorization' => "Bearer $lineToken",
                    ])->post('https://api.line.me/v2/bot/message/multicast', [
                        'to' => $chunk,
                        'messages' => [
                            [
                                'type' => 'flex',
                                'altText' => '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç',
                                'contents' => [
                                    'type' => 'carousel',
                                    'contents' => $bubbles,
                                ],
                            ],
                        ],
                    ]);
                }

                Http::withHeaders([
                    'Content-Type' => 'application/json',
                    'Authorization' => "Bearer $lineToken",
                ])->post('https://api.line.me/v2/bot/message/multicast', [
                    'to' => $chunk,
                    'messages' => [
                        [
                            'type' => 'text',
                            'text' => $message2,
                        ],
                    ],
                ]);
            }
        }

        return redirect()->back()->with('success', 'pushmessage ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß.');
    }



    public function destroy($id)
    {
        $campaign = Campaign::findOrFail($id);

        // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        if ($campaign->campaign_img && file_exists(public_path('img/campaign/' . $campaign->campaign_img))) {
            unlink(public_path('img/campaign/' . $campaign->campaign_img));
        }

        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        $campaign->delete();

        return redirect()->back()->with('success', '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß.');
    }
}
